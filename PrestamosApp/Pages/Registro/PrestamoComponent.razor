@page "/Prestamo";
@page "/Prestamo/{ID:int}"

@using PrestamosApp.BLL
@using PrestamosApp.Models


@inject IToastService toast
@inject HttpClient client


<EditForm Model="prestamos" OnValidSubmit="Post">
    <DataAnnotationsValidator />

    <div class="card">

        <div class="card-header">

            <h3>Registro de Prestamo</h3>

        </div>

        <div class="card-body">
            <form>
                <div class="form-row align-items-center">
                    <div class="col">
                        <div class="form-group">
                            <label>ID:</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="prestamos.PrestamoId" class="form-control col-4" />
                                <ValidationMessage For="(() => prestamos.PrestamoId)"></ValidationMessage>
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar"><span class="fa fa-search "></span>  Buscar </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                @*Fecha*@
                <div class="form-group">
                    <label>FECHA:</label>
                    <InputDate @bind-Value="prestamos.Fecha" class="form-control" />
                    <ValidationMessage For="@(() => prestamos.Fecha)" />
                </div>
                @*Persona*@
                <div class="form-group">
                    <label for="persona_select">PERSONA:</label>
                    <select id="persona_select" @bind="prestamos.PersonaId" class="form-control">
                        <option value=""> Elija una Persona </option>
                        @foreach (var item in lista)
                        {
                            <option value="@item.PersonaId">@item.Nombre</option>
                        }
                    </select>
                </div>

                @*Concepto*@
                <div class="form-group">
                    <label>CONCEPTO:</label>
                    <InputText @bind-Value="prestamos.Concepto" class="form-control" />
                    <ValidationMessage For="@(() => prestamos.Concepto)" />
                </div>
                @*Monto*@
                <div class="form-group">
                    <label>MONTO:</label>
                    <InputNumber step="0.2" @bind-Value="prestamos.Monto" @onclick="DecimalBalance" class="form-control" />
                    <ValidationMessage For="@(() => prestamos.Monto)" />
                </div>
                @*Balance*@
                <div class="form-group">
                    <label>BALANCE:</label>
                    <InputNumber @bind-Value="prestamos.Balance" readonly="true" class="form-control" />
                    <ValidationMessage For="@(() => prestamos.Balance)" />
                </div>
            </form>
        </div>
        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo"><span class="fa fa-plus"></span> Nuevo </button>
                <button type="submit" class="btn btn-lg btn-success"><span class="fa fa-save"></span> Guardar </button>
                <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar"><span class="fa fa-trash"></span> Eliminar </button>
            </div>
        </div>
    </div>
</EditForm>



@code {

    private Prestamos prestamos = new Prestamos();

    [Parameter]
    public int ID { get; set; }

    private List<Personas> lista = new List<Personas>();
    private string SeleccionarPersona { get; set; }

    protected override void OnInitialized()
    {
        Nuevo();

        if (ID > 0)
        {
            prestamos = PrestamoBLL.Buscar(ID);
        }

        lista = PersonasBLL.GetList(p => true);
    }

    private void Nuevo()
    {
        this.prestamos = new Prestamos();
        SeleccionarPersona = string.Empty;
    }

    private void Guardar()
    {
        bool paso;
        paso = PrestamoBLL.Guardar(prestamos);

        if (paso)
        {
            Nuevo();
            toast.ShowSuccess("Guardado Correctamente", "Exito!");
        }
        else
        {
            toast.ShowError("No fue posible guardar", "Error!");
        }
    }

    private void Buscar()
    {
        var encontrado = PrestamoBLL.Buscar(prestamos.PrestamoId);

        if (encontrado != null)
        {
            this.prestamos = encontrado;
        }
        else
        {
            toast.ShowWarning("No encontrado", "Error!");
        }
    }

    private void Eliminar()
    {
        bool eliminado;

        eliminado = PrestamoBLL.Eliminar(prestamos.PersonaId);

        if (eliminado)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado Correctamente", "Exito!");
        }
        else
        {
            toast.ShowError("No fue posible eliminar", "Error!");
        }
    }


    private void DecimalBalance()
    {
        decimal Monto = prestamos.Monto;
        prestamos.Balance = Monto;
    }


    private async Task Post()
    {
      
        client.BaseAddress = new Uri("https://localhost:44379");
        client.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

        var data = System.Text.Json.JsonSerializer.Serialize(prestamos);
        await client.PostAsync("api/prestamos", new StringContent(data));

    }

}